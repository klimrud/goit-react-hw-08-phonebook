{"version":3,"file":"static/js/261.7d1a4cf3.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","components/PhoneContacts/PhoneContacts.jsx","pages/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"phon-container\":\"ContactForm_phon-container__5HWAs\",\"containers\":\"ContactForm_containers__6r4oX\",\"form-label\":\"ContactForm_form-label__Iv1vR\",\"btn\":\"ContactForm_btn__wll+u\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { nanoid } from 'nanoid';\n\nimport { createPhoneContacts } from 'store/phone/thunks';\n\nimport css from 'components/ContactForm/ContactForm.module.css';\n\nexport const ContactForm = ({ onSubmit }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target: { name, value } }) => {\n    if (name === 'name') setName(value);\n    else if (name === 'number') setNumber(value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    dispatch(createPhoneContacts({ id: nanoid(), name, number }))\n      .unwrap()\n      .then(() => console.log('contacts', name));\n    //  onSubmit({ id: nanoid(), name, number });\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div>\n      <form className={css.containers} onSubmit={handleSubmit}>\n        <div className={css['phon-container']}>\n          <label htmlFor=\"exampleInputName\" className={css['form-label']}>\n            Name\n          </label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            onChange={handleChange}\n            value={name}\n            placeholder=\"Jacob Mercer\"\n            required\n          />\n        </div>\n\n        <div className={css['phon-container']}>\n          <label htmlFor=\"exampleInputNumber\" className={css['form-label']}>\n            Number\n          </label>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            onChange={handleChange}\n            value={number}\n            placeholder=\"999-99-99\"\n            required\n          />\n        </div>\n\n        <button type=\"submit\" className={css.btn}>\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactList_item__EZYHO\",\"contactLink\":\"ContactList_contactLink__-gd+P\",\"contactContainer\":\"ContactList_contactContainer__L+mXg\",\"contactHead\":\"ContactList_contactHead__xSbFH\",\"contactIndex\":\"ContactList_contactIndex__Vi9Ni\",\"contactTitle\":\"ContactList_contactTitle__RzOrZ\",\"btnIcon\":\"ContactList_btnIcon__OW52S\",\"stats\":\"ContactList_stats__4i-y2\",\"name\":\"ContactList_name__UCkFW\",\"icon\":\"ContactList_icon__Ly80F\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { IoTrashBin } from 'react-icons/io5';\n\nimport css from 'components/ContactList/ContactList.module.css';\n\nexport const ContactList = ({ contacts=[] , onDelete }) => {\n \n  return (\n    <section>\n      <div className={css.contactContainer}>\n        <h3 className={css.contactHead}>Name</h3>\n        <h3 className={css.contactHead}>Number</h3>\n      </div>\n      <ul className={css['contacts-list']}>\n        {contacts.map(({ id, name, number }) => (\n          <li key={id} className={css.item}>\n            <p className={css.contactTitle}>{name}</p>\n            <a className={css.contactLink} href={'tel:' + number}>\n              {number}\n            </a>\n            <button\n              type=\"click\"\n              className={css.btnIcon}\n              onClick={() => onDelete(id)}\n            >\n              <span className={css.stats}>\n                <IoTrashBin className={css.icon} />\n              </span>\n            </button>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  onDelete: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filterContainer\":\"Filter_filterContainer__8G57N\",\"filterTitle\":\"Filter_filterTitle__5SDqd\",\"filterInput\":\"Filter_filterInput__1Cysk\",\"iconFilter\":\"Filter_iconFilter__QnYge\"};","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { BiSearchAlt2 } from 'react-icons/bi';\nimport { filterChange } from 'store/filter/slice';\n\nimport css from 'components/Filter/Filter.module.css';\n\nexport const Filter = () => {\n  const [value, setValue] = useState('');\n  const dispatch = useDispatch();\n\n  const handleFilterChange = e => {\n    setValue(e.target.value);\n    dispatch(filterChange(e.target.value));\n  };\n  return (\n    <div>\n      <div className={css.filterContainer}>\n        <p className={css.filterTitle}>Find contacts by name</p>\n        <BiSearchAlt2 className={css.iconFilter} />\n        <input\n          className={css.filterInput}\n          type=\"text\"\n          name=\"name\"\n          value={value}\n          onChange={handleFilterChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </div>\n    </div>\n  );\n};\n\n","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  createPhoneContacts,\n  deletePhoneContacts,\n  getPhoneContacts,\n} from 'store/phone/thunks.js';\n\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\n\nimport { getFilter } from 'store/filter/slice';\n\nimport css from 'components/Filter/Filter.module.css';\n\nexport const PhoneContacts = () => {\n  \n  const { items, isLoading, error } = useSelector(state => state.contacts);\n  const filter = useSelector(getFilter);\n\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getPhoneContacts());\n  }, [dispatch]);\n\n  const createContact = contact => {\n    const findContact =  items.some(el => el.name.toLowerCase() === contact.name.toLowerCase() )\n    console.log('findContact', findContact)\n    if (\n      findContact\n      // items.some(el => el.name.toLowerCase() === contact.name.toLowerCase() && el.number === contact.number)\n    ) {\n      return toast.success(`${contact.name} is already in contacts`);\n    } else {\n      dispatch(createPhoneContacts(contact));\n    }\n  };\n\n  const removeContact = async contactId => {\n    try {\n      await dispatch(deletePhoneContacts(contactId));\n      toast.success('Contact deleted successfully');\n    } catch {\n      console.error('error');\n      toast.error('Something went wrong');\n    }\n  };\n\n  const filteredContacts = items.filter(({ name }) =>\n    name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  // const filteredContacts = () => {\n  //   // console.log('filter', filters);\n  //   if (filters) {\n  //     // console.log('filter-filterContacts', filters)\n  //     // console.log('items', items)\n  //     const visibleFriends = items.filter(({ name }) =>\n  //     name.toLowerCase().includes(filters.toLowerCase())\n  //   );\n  //     // console.log('visibleFriends', visibleFriends);\n  //     return visibleFriends;\n  //   } else {\n  //     return items;\n  //   }\n  // };\n\n  if (isLoading) {\n    return <h2>Loading...</h2>;\n  }\n\n  if (error) {\n    return <h2>Something went wrong...</h2>;\n  }\n\n  return (\n    <div>\n      <h2 className={css.title}>Phone book</h2>\n      <ContactForm onSubmit={createContact} />\n\n      <h2 className={css.title}>Contacts</h2>\n\n      {items.length > 1 && <Filter />}\n      {items.length > 0 ? (\n        <ContactList contacts={filteredContacts} onDelete={removeContact} />\n      ) : (\n        <p className=\"title\">No contacts</p>\n      )}\n    </div>\n  );\n};\n","import { PhoneContacts } from 'components/PhoneContacts/PhoneContacts';\nimport React from 'react';\n\n\nconst ContactsPage = () => {\n  return (\n    <nav>\n     \n      <div>ContactsPage</div>\n      <PhoneContacts/>\n      \n    </nav>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["ContactForm","onSubmit","useState","name","setName","number","setNumber","dispatch","useDispatch","handleChange","target","value","className","css","e","preventDefault","createPhoneContacts","id","nanoid","unwrap","then","console","log","htmlFor","type","pattern","title","onChange","placeholder","required","ContactList","contacts","onDelete","map","href","onClick","Filter","setValue","filterChange","PhoneContacts","useSelector","state","items","isLoading","error","filter","getFilter","useEffect","getPhoneContacts","removeContact","contactId","deletePhoneContacts","toast","filteredContacts","toLowerCase","includes","contact","findContact","some","el","length"],"sourceRoot":""}