{"version":3,"file":"static/js/261.735a1871.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","components/PhoneContacts/PhoneContacts.jsx","pages/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"phon-container\":\"ContactForm_phon-container__5HWAs\",\"containers\":\"ContactForm_containers__6r4oX\",\"form-label\":\"ContactForm_form-label__Iv1vR\",\"btn\":\"ContactForm_btn__wll+u\"};","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch } from 'react-redux';\n\nimport { getPhoneContacts } from 'store/phone/thunks';\n\nimport css from 'components/ContactForm/ContactForm.module.css';\n\n\nexport const ContactForm = ({ onSubmit }) => {\n  const [name, setName] = useState('');\n  const [phone, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target: { name, value } }) => {\n    if (name === 'name') setName(value);\n    else if (name === 'phone') setNumber(value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    dispatch(getPhoneContacts());\n    onSubmit({ id: nanoid(), name, phone });\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div>\n      <form className={css.containers} onSubmit={handleSubmit}>\n        <div className={css['phon-container']}>\n          <label htmlFor=\"exampleInputName\" className={css['form-label']}>\n            Name\n          </label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            onChange={handleChange}\n            value={name}\n            placeholder=\"Jacob Mercer\"\n            required\n          />\n        </div>\n\n        <div className={css['phon-container']}>\n          <label htmlFor=\"exampleInputNumber\" className={css['form-label']}>\n            Number\n          </label>\n          <input\n            type=\"tel\"\n            name=\"phone\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            onChange={handleChange}\n            value={phone}\n            placeholder=\"999-99-99\"\n            required\n          />\n        </div>\n\n        <button type=\"submit\" className={css.btn}>\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactList_item__EZYHO\",\"contactLink\":\"ContactList_contactLink__-gd+P\",\"contactContainer\":\"ContactList_contactContainer__L+mXg\",\"contactHead\":\"ContactList_contactHead__xSbFH\",\"contactIndex\":\"ContactList_contactIndex__Vi9Ni\",\"contactTitle\":\"ContactList_contactTitle__RzOrZ\",\"btnIcon\":\"ContactList_btnIcon__OW52S\",\"stats\":\"ContactList_stats__4i-y2\",\"name\":\"ContactList_name__UCkFW\",\"icon\":\"ContactList_icon__Ly80F\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { IoTrashBin } from 'react-icons/io5';\n\nimport css from 'components/ContactList/ContactList.module.css';\n\nexport const ContactList = ({ contacts = [], onDelete }) => {\n  return (\n    <section>\n      <div className={css.contactContainer}>\n        <h3 className={css.contactHead}>Name</h3>\n        <h3 className={css.contactHead}>Number</h3>\n      </div>\n      <ul className={css['contacts-list']}>\n        {contacts.map(({ id, name, phone }) => (\n          <li key={id} className={css.item}>\n            <p className={css.contactTitle}>{name}</p>\n            <a className={css.contactLink} href={'tel:' + phone}>\n              {phone}\n            </a>\n            <button\n              type=\"click\"\n              className={css.btnIcon}\n              onClick={() => onDelete(id)}\n            >\n              <span className={css.stats}>\n                <IoTrashBin className={css.icon} />\n              </span>\n            </button>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      phone: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filterContainer\":\"Filter_filterContainer__8G57N\",\"filterTitle\":\"Filter_filterTitle__5SDqd\",\"filterInput\":\"Filter_filterInput__1Cysk\",\"iconFilter\":\"Filter_iconFilter__QnYge\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BiSearchAlt2 } from 'react-icons/bi';\n\nimport css from 'components/Filter/Filter.module.css';\n\nexport const Filter = ({ filter, onChange }) => {\n  console.log('first')\n  return (\n    <div>\n      <div className={css.filterContainer}>\n        <p className={css.filterTitle}>Find contacts by name</p>\n        <BiSearchAlt2 className={css.iconFilter} />\n        <input\n          className={css.filterInput}\n          type=\"text\"\n          name=\"name\"\n          value={filter}\n          onChange={e => onChange(e.currentTarget.value)}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </div>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\n// import { Filter } from '@mui/icons-material';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Toaster, toast } from 'react-hot-toast';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {Filter} from 'components/Filter/Filter'\n\nimport { filterChange } from 'store/filter/slice';\nimport {\n  createPhoneContacts,\n  deletePhoneContacts,\n  getPhoneContacts,\n} from 'store/phone/thunks.js';\nimport { useEffect } from 'react';\n\nimport css from 'components/Filter/Filter.module.css';\n\nexport const PhoneContacts = () => {\n  const { items, isLoading, error } = useSelector(state => state.contacts);\n  const { filter } = useSelector(state => state.filter);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getPhoneContacts());\n  }, [dispatch]);\n\n  const createContact = contact => {\n    if (\n      items.some(el => el.name === contact.name && el.phone === contact.phone)\n    ) {\n      toast.success(`${contact.name} is already in contacts`);\n    } else {\n      dispatch(createPhoneContacts(contact));\n    }\n  };\n\n  const removeContact = async contactId => {\n    try {\n      await dispatch(deletePhoneContacts(contactId));\n      toast.success('Contact deleted successfully');\n    } catch {\n      console.error('error');\n      toast.error('Something went wrong');\n    }\n  };\n\n  const changeFilter = filter => {\n    dispatch(filterChange(filter));\n  };\n\n  const filteredContacts = () => {\n    if (filter) {\n      const visibleFriends = items.filter(el =>\n        el.name.toLowerCase().includes(filter.toLowerCase().trim())\n      );\n      return visibleFriends;\n    } else {\n      return items;\n    }\n  };\n\n  if (isLoading) {\n    return <h2>Loading...</h2>;\n  }\n\n  if (error) {\n    return <h2>Something went wrong...</h2>;\n  }\n\n  return (\n    <div>\n      <h2 className={css.title}>Phone book</h2>\n      <ContactForm onSubmit={createContact} />\n\n      <h2 className={css.title}>Contacts</h2>\n\n      {items.length>1 && <Filter filter={filter} onChange={changeFilter} />}\n      {items.length>0 ? (\n        <ContactList contacts={filteredContacts()} onDelete={removeContact} />\n      ) : (\n        <p className=\"title\">No contacts</p>\n      )}\n\n      <Toaster\n        position=\"top-left\"\n        reverseOrder={false}\n        gutter={8}\n        containerClassName=\"\"\n        containerStyle={{}}\n        toastOptions={{\n          // Define default options\n          className: '',\n          duration: 5000,\n          style: {\n            background: 'rgb(47, 155, 255)',\n            color: '#fff',\n          },\n\n          // Default options for specific types\n          success: {\n            duration: 3000,\n            theme: {\n              primary: 'green',\n              secondary: 'black',\n            },\n          },\n        }}\n      />\n    </div>\n  );\n};\n","import { PhoneContacts } from 'components/PhoneContacts/PhoneContacts';\nimport React from 'react';\n\n\nconst ContactsPage = () => {\n  return (\n    <nav>\n     \n      <div>ContactsPage</div>\n      <PhoneContacts/>\n      \n    </nav>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["ContactForm","onSubmit","useState","name","setName","phone","setNumber","dispatch","useDispatch","handleChange","target","value","className","css","e","preventDefault","getPhoneContacts","id","nanoid","htmlFor","type","pattern","title","onChange","placeholder","required","ContactList","contacts","onDelete","map","href","onClick","Filter","filter","console","log","currentTarget","PhoneContacts","useSelector","state","items","isLoading","error","useEffect","removeContact","contactId","deletePhoneContacts","toast","contact","some","el","createPhoneContacts","length","filterChange","toLowerCase","includes","trim","position","reverseOrder","gutter","containerClassName","containerStyle","toastOptions","duration","style","background","color","success","theme","primary","secondary"],"sourceRoot":""}